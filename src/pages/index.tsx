import Head from 'next/head'
import Image from 'next/image'
// import { query } from '.keystone/api'

import { useGetProjectsQuery, GetProjectsDocument } from '$graphql/generated'
import styles from '../styles/Home.module.css'
import { GetServerSideProps } from 'next'
import { createSSRExchange, createUrqlClient } from '$utils/urql_client'
import { DocumentRenderer } from '@keystone-6/document-renderer'
import { getImageUrl } from '$utils/image-url'

export default function Home() {
  // const [{ data, error, fetching }, refresh] = useGetProjectsQuery()
  const [{ fetching, error, data }] = useGetProjectsQuery()

  if (fetching) {
    return <h1>loading...</h1>
  }

  if (error) {
    console.log(error)
    return <h2>{error.message}</h2>
  }

  return (
    <div className={styles.container}>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <main>
        <h1 style={{ textAlign: 'center' }}>Projects</h1>
        {data?.projects?.map(project => {
          return (
            <div key={project.id}>
              <h2>{project.title}</h2>
              <DocumentRenderer document={project.description?.document} />
              {project.demo && (
                <div>
                  <a href={project.demo}>Demo</a>
                </div>
              )}
              {project.source && (
                <div>
                  <a href={project.source}>Repository</a>
                </div>
              )}
              {project.images?.map(img => {
                return (
                  <Image
                    key={img.id}
                    src={getImageUrl(img.image!.url)}
                    alt={img.label ?? 'Alt Text'}
                    width={img.image?.width}
                    height={img.image?.height}
                  />
                )
              })}
            </div>
          )
        })}
      </main>
    </div>
  )
}

// export const getServerSideProps: GetServerSideProps = async ctx => {
//   const ssrCache = createSSRExchange()
//   const client = createUrqlClient(ssrCache)

//   await client.query(GetProjectsDocument).toPromise()

//   return {
//     props: {
//       urqlState: ssrCache.extractData(),
//     },
//   }
// }
